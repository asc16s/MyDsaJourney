Today learned Topics
-> Swap 2 numbers
-> wrapper classes
-> Facts on non-primitive data types
-> Input in Java using BufferedReader and Scanner classes
-> Output in Java
-> Escape sequences in Java and Bitwise and,or and not left shift right shift


Swapping Two Numbers:
To Swap 2 numbers we will use a separate temp variable.
Q: a=20 and b=30. Make b=20 and a=30?
A: Logic: int a=20;
          int b=30;
          int temp=0;
          temp=a;
          a=b;
          b=temp;
--> Non Primitive data types are references in Java
--> A reference is like a pointer to memory. When an object is created from a class, Java allocates enough memory required to store the object. When the newly created object is assigned to a variable, the variable gets
    the value of the reference to the object, but not to the object itself.
--> Memory for the non-primitive type is always allocated in heap memory
--> Member of NON-PRIMITIVE TYPE gets default value, for int, it is 0 for float 0 for boolean it is false.

Wrapper Classes:
Every primitive type can be represented as a non-primitive type in Java by using wrapper classes.
Wrapper Classes:
-> int - Integer
-> char - Character
-> byte - Byte
-> short - Short
-> long - Long
-> float - Float
-> double - Double
-> boolean - Boolean

-> Wrapper classes can be applied in the Java Collection Framework.
-> Auto-boxing & Auto-unboxing
-> Auto-boxing: Primitive type can be converted into its respective Wrapper class
-> Auto-unboxing: Non-Primitive(Wrapper class) is converted into Primitive type
Example: 
class Main
{
  public static void main(String[] args)
  {
    int a=40;
    Integer b=a; // auto-boxing
    int c=b; // auto-unboxing
  }
}

Other Example: 
class Main 
{
 public static void main(String[] args)
 {
   Integer a=400,b=400;
   if(a==b)
   {
     System.out.println("same");
   }
   else
   {
    System.out.println("Not Same");
   }

  }
}
O/P: NOT SAME BECAUSE a AND b ARE REFERENCES IN JAVA BUT PLEASE NOTE THAT FOR SMALLER NUMBERS IT WORKS STRANGLY. 
FOR SMALLER NUMBERS O/P: SAME BECAUSE REFERENCE b REFERS TO REFERENCE A HERE. WHEN WE CREATE THE OTHER OBJECT TO THE SAME MEMORY IT CACHES THE PREVIOUS MEMORY REFERENCE b REFERS TO REFERENCE a

Type Conversion 

1) Implicit / Widening conversion 
2) Explicit / Narrowing conversion
   -> Widening Conversion order:
           Byte -> short ->   -> int -> long -> float -> double  
                          char->
   char can be converted into int long float double this is called widening
   -> Narrowing Conversion:
--> double -> int, float, long, short, byte, char
--> double a=34.5;
--> int b=(int)a;
--> char c=(char)a;

Input in Java:

1) BufferedReader class
   Using BufferedReader class we can take input in Java by following the particular syntax:
   it is synchronized. when we are using multiple threads BufferedReader is prefered
   import java.io.*; // including all classes in io package
    class Main{
      public static void main(String[] args) throws IOException
     {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        String a=br.readLine();
        System.out.println(a);
        int b = Integer.parseInt(br.readLine()); // to take int as input converting string to int
        float k = Float.parseFloat(br.readLine());// to take float as input converting string to float
        System.out.println(a+" "+ b +" "+k);
     }
   }

2) Scanner class
Using scanner class we can simply take inputs in java
import java.util.*; // must include util package
class Main{
          public static void main(String[] args){
               Scanner sc=new Scanner(System.in);
               int a=sc.nextInt();
               float b=sc.nextFloat();
               long c=sc.nextLong();
               String s=sc.nextLne();
               System.out.println(a+" "+b+" "+c+" "+s);
}
}

Output in Java :

System.out.print();
System.out.println();// printing in new lines
System.out.format() or System.out.printf();// used for floating point numbers, dates and times

class Test{ 
      public static void main(String[] args)
      {
        int a=20,b=40;
        double c=Math.PI;
        System.out.format("%f",c); // printing pi value
        System.out.println("%.2f",c); // printing only 2 decimals after the point (3.14)
        System.out.println("%5.2f",c); // printing an extra space infront of 3.14 to print 5 characters space3.14(total 5 character)
      }
}

Escape Sequences:
\ backslash
--> Print: welcome to "geeksforgeeks" on screen
--> when we use double quotes in the middle then we should use back slash infront of double quote
    EX: System.out.println("Welcome to \"geeksforgeeks\");
--> Print: welcome to \geeksforgeeks on screen
--> use single backslash infront of the backslash to print the back slash
    EX: System.out.println("welcome to \\geeks for geeks");
--> valid escape sequences are \t, \b, \n , \f, \r, \\, \', \"
--> Tab (4 spaces) \t

Bitwise operator :
int a=2;
int ~a=?
~a is nothing but inverse a. range of int is (-2 power 31) to (2 power 31 -1). 
--> Note: 2 power 32 -1 = 111.....1(32 1's)
--> https://practice.geeksforgeeks.org/batch/cip-1/track/cip-java-intro-var-operator/video/MTE1MA%3D%3D please visit this link for more clarification
--> Bitwise operator part 3 pending (Right shift operator)

